@model TextBooks.Book

@{
    ViewBag.Title = "Create";
}

<h2>Submit A Book</h2>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal" id="submitBookForm" onsubmit="formSubmitted()">
        <hr />
        <div class="spacer" style="height: 50px">
        </div>

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="container form-group">
            @Html.Label(" ", htmlAttributes: new { @class = "control-label col-md-5 spinner"})
            <label class = "control-label col-md-5 auto-hidden" style = "display: none" id = "textLabel">Title</label>
            <div class="col-md-4">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control center", @id = "titleTextBox", @placeholder = "Enter the title of the textbook."} })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group auto-hidden" style="display: none">
            @Html.LabelFor(model => model.Author, htmlAttributes: new { @class = "control-label col-xs-5" })
            <div class="col-md-6">
                @Html.EditorFor(model => model.Author, new { htmlAttributes = new { @class = "form-control", @id = "authorTextBox"} })
                @Html.ValidationMessageFor(model => model.Author, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group auto-hidden" style="display: none">
            @Html.LabelFor(model => model.ISBN, htmlAttributes: new { @class = "control-label col-xs-5" })
            <div class="col-md-6">
                @Html.EditorFor(model => model.ISBN, new { htmlAttributes = new { @class = "form-control", @id = "isbnTextBox" } })
                @Html.ValidationMessageFor(model => model.ISBN, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group auto-hidden" style="display: none">
            @Html.LabelFor(model => model.Year, htmlAttributes: new { @class = "control-label col-xs-5" })
            <div class="col-md-6">
                @Html.EditorFor(model => model.Year, new { htmlAttributes = new { @class = "form-control", @id = "yearTextBox" } })
                @Html.ValidationMessageFor(model => model.Year, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group auto-hidden" style="display: none">
            @Html.LabelFor(model => model.Edition, htmlAttributes: new { @class = "control-label col-xs-5" })
            <div class="col-md-6">
                @Html.EditorFor(model => model.Edition, new { htmlAttributes = new { @class = "form-control", @id = "editionTextBox" } })
                @Html.ValidationMessageFor(model => model.Edition, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group auto-hidden" style="display: none">
            <div class="col-md-offset-5 col-xs-6">
                <input id="submitButton" type="submit" value="Submit Book" class="btn btn-default btn-transparent" />
                @Html.ActionLink("Cancel", "Index", "Home", null, new { @class = "btn btn-default btn-transparent" })
            </div>
        </div>
    </div>

    <div class="spinner" style="height: 244px">
    </div>
}

@functions {
        string modelStateValid()
        {
            if (ViewData.ModelState.IsValid)
            {
                return "false";
            } else
            {
                return "true";
            }
        }
    }

@section Scripts {
    <script>errors = @modelStateValid();</script>
    @Scripts.Render("~/bundles/jqueryval")
    @Styles.Render("~/Content/css")
    @Styles.Render("~/bundles/jqueryuicss")
    @Scripts.Render("~/bundles/jqueryui")
    <link href="@Url.Content("~/Content/Home.css")" rel="stylesheet" type="text/css" />
    <!--Script for autocomplete.-->
    <script src="~/Scripts/CreateBooksAutocomplete.js"></script>
}